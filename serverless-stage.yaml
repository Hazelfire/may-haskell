service: maybackend-staging

provider:
  name: aws
  runtime: haskell
  httpApi:
    cors: true
    payload: '1.0'
    authorizers:
      authorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_8WbD5F0SG
        audience: 
          - ${env:COGNITO_STAGING_AUDIENCE}
  iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:BatchWriteItem
          - dynamodb:PutItem
          - dynamodb:DeleteItem
        Resource: 
          - "arn:aws:dynamodb:${self:provider.region}:*:table/MayUserTableStaging"
          - "arn:aws:dynamodb:${self:provider.region}:*:table/MayNodeTableStaging"
      - Effect: Allow
        Action:
          - cognito-idp:AdminDeleteUser
          - cognito-idp:AdminAddUserToGroup
        Resource:
          - "arn:aws:cognito-idp:us-east-1:659023026482:userpool/us-east-1_8WbD5F0SG"
  environment:
    STRIPE_API_KEY: ${env:STRIPE_API_KEY_STAGING}
    FRONTEND_URL: https://stage.may.hazelfire.net/
    STRIPE_PRICE: ${env:STRIPE_PRICE_STAGING}
    USER_TABLE_NAME: MayUserTableStaging
    NODE_TABLE_NAME: MayNodeTableStaging
    COGNITO_POOL: ${env:COGNITO_POOL_STAGING}

plugins:
  - serverless-haskell

functions:
  testfunc:
    handler: may-haskell.may-haskell-exe
    # Here, mypackage is the Haskell package name and mypackage-exe is the
    # executable name as defined in the Cabal file. The handler field may be
    # prefixed with a path of the form `dir1/.../dirn`, relative to
    # `serverless.yml`, which points to the location where the Haskell
    # package `mypackage` is defined. This prefix is not needed when the
    # Stack project is defined at the same level as `serverless.yml`.
    events:
      - httpApi:
          path: /
          cors: true
          method: post
          integration: lambda-proxy
          authorizer:
            name: authorizer
            scopes: []
resources:
  Resources:
    MayUserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: MayUserTableStaging
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    MayNodeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: MayNodeTableStaging
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: node_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: node_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
